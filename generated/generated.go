// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 20 May 2025 15:01:37 BST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package generated

/*
#cgo LDFLAGS: -L/usr/lib -lrkllm_wrapper
#include "/usr/include/rkllm_wrapper.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// Rkllmwrapper_init function as declared in include/rkllm_wrapper.h:35
func Rkllmwrapper_init(model_path string, opts []RkllmOptions) int32 {
	model_path = safeString(model_path)
	cmodel_path, cmodel_pathAllocMap := unpackPCharString(model_path)
	copts, coptsAllocMap := unpackArgSRkllmOptions(opts)
	__ret := C.rkllmwrapper_init(cmodel_path, copts)
	packSRkllmOptions(opts, copts)
	runtime.KeepAlive(coptsAllocMap)
	runtime.KeepAlive(model_path)
	runtime.KeepAlive(cmodel_pathAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_run_ex function as declared in include/rkllm_wrapper.h:37
func Rkllm_run_ex(input unsafe.Pointer, input_mode int32, output []byte, output_size int32, token_count uint64, callback RkllmStreamCallback, user_data unsafe.Pointer) int32 {
	cinput, cinputAllocMap := input, cgoAllocsUnknown
	cinput_mode, cinput_modeAllocMap := (C.int)(input_mode), cgoAllocsUnknown
	coutput, coutputAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&output)).Data)), cgoAllocsUnknown
	coutput_size, coutput_sizeAllocMap := (C.int)(output_size), cgoAllocsUnknown
	ctoken_count, ctoken_countAllocMap := (C.size_t)(token_count), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	__ret := C.rkllm_run_ex(cinput, cinput_mode, coutput, coutput_size, ctoken_count, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(ctoken_countAllocMap)
	runtime.KeepAlive(coutput_sizeAllocMap)
	runtime.KeepAlive(coutputAllocMap)
	runtime.KeepAlive(cinput_modeAllocMap)
	runtime.KeepAlive(cinputAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllmwrapper_is_running function as declared in include/rkllm_wrapper.h:45
func Rkllmwrapper_is_running() int32 {
	__ret := C.rkllmwrapper_is_running()
	__v := (int32)(__ret)
	return __v
}

// Rkllmwrapper_abort function as declared in include/rkllm_wrapper.h:46
func Rkllmwrapper_abort() int32 {
	__ret := C.rkllmwrapper_abort()
	__v := (int32)(__ret)
	return __v
}

// Rkllm_destroy_simple function as declared in include/rkllm_wrapper.h:47
func Rkllm_destroy_simple() {
	C.rkllm_destroy_simple()
}
