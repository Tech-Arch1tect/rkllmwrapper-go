// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sun, 27 Apr 2025 22:50:51 BST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package generated

/*
#cgo LDFLAGS: -L/usr/lib -lrkllm_wrapper
#include "/usr/include/rkllm_wrapper.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// allocRkllmOptionsMemory allocates memory for type C.RkllmOptions in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRkllmOptionsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRkllmOptionsValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRkllmOptionsValue = unsafe.Sizeof([1]C.RkllmOptions{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *RkllmOptions) Ref() *C.RkllmOptions {
	if x == nil {
		return nil
	}
	return x.ref60e62cc1
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *RkllmOptions) Free() {
	if x != nil && x.allocs60e62cc1 != nil {
		x.allocs60e62cc1.(*cgoAllocMap).Free()
		x.ref60e62cc1 = nil
	}
}

// NewRkllmOptionsRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewRkllmOptionsRef(ref unsafe.Pointer) *RkllmOptions {
	if ref == nil {
		return nil
	}
	obj := new(RkllmOptions)
	obj.ref60e62cc1 = (*C.RkllmOptions)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *RkllmOptions) PassRef() (*C.RkllmOptions, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref60e62cc1 != nil {
		return x.ref60e62cc1, nil
	}
	mem60e62cc1 := allocRkllmOptionsMemory(1)
	ref60e62cc1 := (*C.RkllmOptions)(mem60e62cc1)
	allocs60e62cc1 := new(cgoAllocMap)
	allocs60e62cc1.Add(mem60e62cc1)

	var cmax_new_tokens_allocs *cgoAllocMap
	ref60e62cc1.max_new_tokens, cmax_new_tokens_allocs = (C.int32_t)(x.Max_new_tokens), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cmax_new_tokens_allocs)

	var cmax_context_len_allocs *cgoAllocMap
	ref60e62cc1.max_context_len, cmax_context_len_allocs = (C.int32_t)(x.Max_context_len), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cmax_context_len_allocs)

	var ctop_k_allocs *cgoAllocMap
	ref60e62cc1.top_k, ctop_k_allocs = (C.int32_t)(x.Top_k), cgoAllocsUnknown
	allocs60e62cc1.Borrow(ctop_k_allocs)

	var ctop_p_allocs *cgoAllocMap
	ref60e62cc1.top_p, ctop_p_allocs = (C.float)(x.Top_p), cgoAllocsUnknown
	allocs60e62cc1.Borrow(ctop_p_allocs)

	var ctemperature_allocs *cgoAllocMap
	ref60e62cc1.temperature, ctemperature_allocs = (C.float)(x.Temperature), cgoAllocsUnknown
	allocs60e62cc1.Borrow(ctemperature_allocs)

	var crepeat_penalty_allocs *cgoAllocMap
	ref60e62cc1.repeat_penalty, crepeat_penalty_allocs = (C.float)(x.Repeat_penalty), cgoAllocsUnknown
	allocs60e62cc1.Borrow(crepeat_penalty_allocs)

	var cfrequency_penalty_allocs *cgoAllocMap
	ref60e62cc1.frequency_penalty, cfrequency_penalty_allocs = (C.float)(x.Frequency_penalty), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cfrequency_penalty_allocs)

	var cpresence_penalty_allocs *cgoAllocMap
	ref60e62cc1.presence_penalty, cpresence_penalty_allocs = (C.float)(x.Presence_penalty), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cpresence_penalty_allocs)

	var cmirostat_allocs *cgoAllocMap
	ref60e62cc1.mirostat, cmirostat_allocs = (C.int32_t)(x.Mirostat), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cmirostat_allocs)

	var cmirostat_tau_allocs *cgoAllocMap
	ref60e62cc1.mirostat_tau, cmirostat_tau_allocs = (C.float)(x.Mirostat_tau), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cmirostat_tau_allocs)

	var cmirostat_eta_allocs *cgoAllocMap
	ref60e62cc1.mirostat_eta, cmirostat_eta_allocs = (C.float)(x.Mirostat_eta), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cmirostat_eta_allocs)

	var cn_keep_allocs *cgoAllocMap
	ref60e62cc1.n_keep, cn_keep_allocs = (C.int32_t)(x.N_keep), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cn_keep_allocs)

	var cskip_special_token_allocs *cgoAllocMap
	ref60e62cc1.skip_special_token, cskip_special_token_allocs = (C.int)(x.Skip_special_token), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cskip_special_token_allocs)

	var cnum_cpus_allocs *cgoAllocMap
	ref60e62cc1.num_cpus, cnum_cpus_allocs = (C.int)(x.Num_cpus), cgoAllocsUnknown
	allocs60e62cc1.Borrow(cnum_cpus_allocs)

	x.ref60e62cc1 = ref60e62cc1
	x.allocs60e62cc1 = allocs60e62cc1
	return ref60e62cc1, allocs60e62cc1

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x RkllmOptions) PassValue() (C.RkllmOptions, *cgoAllocMap) {
	if x.ref60e62cc1 != nil {
		return *x.ref60e62cc1, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *RkllmOptions) Deref() {
	if x.ref60e62cc1 == nil {
		return
	}
	x.Max_new_tokens = (int32)(x.ref60e62cc1.max_new_tokens)
	x.Max_context_len = (int32)(x.ref60e62cc1.max_context_len)
	x.Top_k = (int32)(x.ref60e62cc1.top_k)
	x.Top_p = (float32)(x.ref60e62cc1.top_p)
	x.Temperature = (float32)(x.ref60e62cc1.temperature)
	x.Repeat_penalty = (float32)(x.ref60e62cc1.repeat_penalty)
	x.Frequency_penalty = (float32)(x.ref60e62cc1.frequency_penalty)
	x.Presence_penalty = (float32)(x.ref60e62cc1.presence_penalty)
	x.Mirostat = (int32)(x.ref60e62cc1.mirostat)
	x.Mirostat_tau = (float32)(x.ref60e62cc1.mirostat_tau)
	x.Mirostat_eta = (float32)(x.ref60e62cc1.mirostat_eta)
	x.N_keep = (int32)(x.ref60e62cc1.n_keep)
	x.Skip_special_token = (int32)(x.ref60e62cc1.skip_special_token)
	x.Num_cpus = (int32)(x.ref60e62cc1.num_cpus)
}

// safeString ensures that the string is NULL-terminated, a NULL-terminated copy is created otherwise.
func safeString(str string) string {
	if len(str) > 0 && str[len(str)-1] != '\x00' {
		str = str + "\x00"
	} else if len(str) == 0 {
		str = "\x00"
	}
	return str
}

// unpackPCharString copies the data from Go string as *C.char.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	str = safeString(str)
	mem0 := unsafe.Pointer(C.CString(str))
	allocs.Add(mem0)
	return (*C.char)(mem0), allocs
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

const sizeOfPtr = unsafe.Sizeof(&struct{}{})

// unpackArgSRkllmOptions transforms a sliced Go data structure into plain C format.
func unpackArgSRkllmOptions(x []RkllmOptions) (unpacked *C.RkllmOptions, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocRkllmOptionsMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.RkllmOptions)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.RkllmOptions)(h.Data)
	return
}

// packSRkllmOptions reads sliced Go data structure out from plain C format.
func packSRkllmOptions(v []RkllmOptions, ptr0 *C.RkllmOptions) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfRkllmOptionsValue]C.RkllmOptions)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewRkllmOptionsRef(unsafe.Pointer(&ptr1))
	}
}

// copyPCharBytes copies the data from Go slice as *C.char.
func copyPCharBytes(slice *sliceHeader) (*C.char, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfCharValue) * slice.Len,
		Cap:  int(sizeOfCharValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.char)(mem0), allocs
}

// allocCharMemory allocates memory for type C.char in C.
// The caller is responsible for freeing the this memory via C.free.
func allocCharMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfCharValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfCharValue = unsafe.Sizeof([1]C.char{})
